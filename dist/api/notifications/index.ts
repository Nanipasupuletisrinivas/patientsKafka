/* eslint-disable */
// tslint:disable
/**
 * Notifications Service
 * Notifications Service
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import passport from 'passport'
import * as t from './types'
import * as v from '../../validation'
import { Api } from '../../models'

export default function(app: Express, impl: t.NotificationsApi) {
	app.put(
		'/notification/update',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiNotificationDataFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.putNotificationUpdate(__body()).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiNotificationDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.putNotificationUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.putNotificationUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.putNotificationUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.putNotificationUpdate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in notifications.putNotificationUpdate', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in notifications.putNotificationUpdate', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.post(
		'/notifications/create',
		function (req, res) {
			try {
				function __body() {
					const __contentType = req.get('Content-Type')
					const __mimeType = __contentType ? __contentType.replace(/;.*/, '') : undefined

					if (__mimeType === 'application/json') {
						return v.modelApiNotificationDataFromJson('body', req.body)
					}
					console.error(`Invalid request content type: ${__contentType}`)
					throw new Error(`Invalid request content type: ${__contentType}`)
				}

				impl.postNotificationsCreate(__body()).then(function (response) {
					if (response.status === 201) {
						let body: any
						try {
							body = v.modelApiNotificationDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.postNotificationsCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(201)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.postNotificationsCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.postNotificationsCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.postNotificationsCreate', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in notifications.postNotificationsCreate', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in notifications.postNotificationsCreate', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.delete(
		'/notifications/delete',
		function (req, res) {
			try {
				impl.deleteNotificationsDelete(v.parseString('query.Notificationid', req.query['Notificationid']), v.parseString('query.patientId', req.query['patientId'])).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.deleteNotificationsDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.deleteNotificationsDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.deleteNotificationsDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.deleteNotificationsDelete', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in notifications.deleteNotificationsDelete', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in notifications.deleteNotificationsDelete', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.get(
		'/notifications/get',
		function (req, res) {
			try {
				impl.getNotificationsGet(v.parseString('query.Notificationid', req.query['Notificationid']), v.parseString('query.patientId', req.query['patientId'])).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiNotificationDataToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}
					if (response.status === 422) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGet', error)
							res.status(500)
							res.send()
							return
						}

						res.status(422)
						res.send(body)
						return
					}

					console.log('Unsupported response in notifications.getNotificationsGet', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in notifications.getNotificationsGet', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

	app.get(
		'/notifications/getAll',
		function (req, res) {
			try {
				impl.getNotificationsGetAll(v.allowUndefined(v.parseInteger)('query.Limit', req.query['Limit']), v.allowUndefined(v.enumApiDirectionParamEnumFromJson)('query.Direction', req.query['Direction']), v.allowUndefined(v.parseString)('query.SortByField', req.query['SortByField'])).then(function (response) {
					if (response.status === 200) {
						let body: any
						try {
							body = v.modelApiNotificationPagedResultDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(200)
						res.send(body)
						return
					}
					if (response.status === 401) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(401)
						res.send(body)
						return
					}
					if (response.status === 404) {
						let body: any
						try {
							body = v.modelApiMessageDtoToJson('response', response.body)
						} catch (error) {
							console.error('Invalid response body in notifications.getNotificationsGetAll', error)
							res.status(500)
							res.send()
							return
						}

						res.status(404)
						res.send(body)
						return
					}

					console.log('Unsupported response in notifications.getNotificationsGetAll', response)
					res.status(500)
					res.send()
				}).catch(function (error) {
					console.error('Unexpected error in notifications.getNotificationsGetAll', error.stack || error)
					res.status(500)
					res.send()
				})
			} catch (error) {
				/* Catch validation errors */
				res.status(400)
				res.send(error)
			}
		}
	)

}
