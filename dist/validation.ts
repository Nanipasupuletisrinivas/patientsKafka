/* eslint-disable */
// tslint:disable
/**
 * Notifications Service
 * Notifications Service
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

import { Express } from 'express'
import { Api } from './models'

type FromJsonFunction<T> = (name: string, value: any) => T
type MapOf<T> = { [name: string]: T }

/**
 * A conditional type to convert an interface model to the equivalent JSON model.
 * We may represent dates as Date objects in our object model, but we must translate
 * them to strings for the JSON model.
 */
type ToJson<T> =
	T extends Date ? string
	: T extends object ? {
		[P in keyof T]: ToJson<T[P]>
	}
	: T extends (infer R)[] ? ToJson<R>[]
	: T

export function arrayFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return function(name: string, value: any) {
		if (typeof value !== 'object' || typeof value.length !== 'number') {
			throw `Invalid type for ${name}: expected array got ${typeof value}`
		}
	
		const result: T[] = []
		for (const el of value) {
			result.push(next(name, el))
		}
		return result
	}
}

export function arrayToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<T[]> {
	return arrayFromJson(next)
}

export function mapFromJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return function(name: string, value: any) {
		if (typeof value !== 'object') {
			throw `Invalid type for ${name}: expected object got ${typeof value}`
		}
	
		const result: MapOf<T> = {}
		for (const key in value) {
			if (value.hasOwnProperty(key)) {
				result[key] = next(name, value[key])
			}
		}
		return result
	}
}

export function mapToJson<T>(next: FromJsonFunction<T>): FromJsonFunction<MapOf<T>> {
	return mapFromJson(next)
}

export function allowNull<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		return next(name, value)
	}
}

export function allowUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | undefined> {
	return function(name: string, value: any) {
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function allowNullOrUndefined<T>(next: FromJsonFunction<T>): FromJsonFunction<T | null | undefined> {
	return function(name: string, value: any) {
		if (value === null) {
			return null
		}
		if (value === undefined) {
			return undefined
		}
		return next(name, value)
	}
}

export function unsupportedFromJson(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid type for ${name}: expected unknown got undefined`
	}
	return value
}

export function unsupportedToJson(name: string, value: unknown): any {
	return unsupportedFromJson(name, value)
}

export function parseUnsupported(name: string, value: any): unknown {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected unknown got undefined`
	}
	return value
}

export function booleanFromJson(name: string, value: any): boolean {
	if (typeof value !== 'boolean') {
		throw `Invalid type for ${name}: expected boolean got ${typeof value}`
	}
	return value
}

export function booleanToJson(name: string, value: boolean): any {
	return booleanFromJson(name, value)
}

export function parseBoolean(name: string, value: any): boolean {
	if (value === 'true') {
		return true
	} else if (value === 'false') {
		return false
	} else {
		throw `Invalid value for ${name}: expected boolean got "${value}"`
	}
}

export function stringFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return value
}

export function stringToJson(name: string, value: string): any {
	return stringFromJson(name, value)
}

export function binaryFromJson(name: string, value: any): Buffer {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	return new Buffer(value, 'base64')
}

export function binaryToJson(name: string, value: string | Buffer): string {
	if (typeof value === 'string') {
		return value
	} else {
		return value.toString('base64')
	}
}

export function parseString(name: string, value: any): string {
	if (value === undefined) {
		throw `Invalid value for ${name}: expected string got undefined`
	}
	if (typeof value === 'string') {
		return value
	}
	if (typeof value === 'object' && typeof value.length === 'number') {
		if (value.length > 0) {
			return value[0]
		}
	}

	throw `Invalid value for ${name}: expected string got ${typeof value}`
}

export function integerFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	if (Math.floor(value) !== value) {
		throw `Invalid value for ${name}: expected integer got "${value}"`
	}
	return value
}

export function integerToJson(name: string, value: number): any {
	return integerFromJson(name, value)
}

export function parseInteger(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		if (value.indexOf('.') !== -1) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}

		const result = parseInt(value, 10)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected integer got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected integer got ${typeof value}`
}

export function numberFromJson(name: string, value: any): number {
	if (typeof value !== 'number') {
		throw `Invalid type for ${name}: expected number got ${typeof value}`
	}
	if (isNaN(value)) {
		throw `Invalid NaN for ${name}`
	}
	return value
}

export function numberToJson(name: string, value: number): any {
	return numberFromJson(name, value)
}

export function parseNumber(name: string, value: any): number {
	if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
		value = value[0]
	}
	if (typeof value === 'string') {
		const result = parseFloat(value)
		if (isNaN(result)) {
			throw `Invalid value for ${name}: expected float got "${value}"`
		}
		return result
	}
	throw `Invalid value for ${name}: expected number got ${typeof value}`
}

export function dateFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
		throw `Invalid value for ${name}: expected valid date string got "${value}"`
	}
	return value
}

export function parseDate(name: string, value: any): string {
	return dateFromJson(name, value)
}

export function dateToJson(name: string, value: string): string {
	return dateFromJson(name, value)
}

export function dateTimeFromJson(name: string, value: any): Date {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
		throw `Invalid value for ${name}: expected valid datetime string got "${value}"`
	}
	return new Date(value)
}

export function parseDateTime(name: string, value: any): Date {
	return dateTimeFromJson(name, value)
}

export function dateTimeToJson(name: string, value: Date): string {
	if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
		throw `Invalid type for ${name}: expected Date got ${typeof value}`
	}
	return value.toISOString()
}

export function timeFromJson(name: string, value: any): string {
	if (typeof value !== 'string') {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}
	if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
		throw `Invalid value for ${name}: expected valid time string got "${value}"`
	}
	return value
}

export function parseTime(name: string, value: any): string {
	return timeFromJson(name, value)
}

export function timeToJson(name: string, value: string): string {
	return timeFromJson(name, value)
}

/* Model conversion functions */

export function enumApiDirectionParamEnumFromJson(name: string, value: any): Api.DirectionParamEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'asc') {
		return Api.DirectionParamEnum.Asc
	}
	if (value === 'desc') {
		return Api.DirectionParamEnum.Desc
	}

	throw `Unexpected enum value for Api.DirectionParamEnum: ${value}`
}

export function enumApiDirectionParamEnumToJson(name: string, value: Api.DirectionParamEnum): Api.DirectionParamEnum {
	if (typeof value !== 'string' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected string got ${typeof value}`
	}

	if (value === 'asc') {
		return Api.DirectionParamEnum.Asc
	}
	if (value === 'desc') {
		return Api.DirectionParamEnum.Desc
	}

	throw `Unexpected enum value for Api.DirectionParamEnum: ${value}`
}

const ApiMessageDtoKeys: string[] = ['message']

function modelApiMessageDtoFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.MessageDto {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMessageDtoKeys.forEach(k => knownKeys[k] = true)

	const result: Api.MessageDto = {
		'message': stringFromJson(`${name}.message`, value['message']),
	}

	return result
}

function modelApiMessageDtoToJsonContent(name: string, value: Api.MessageDto, knownKeys: Record<string, boolean> = {}): ToJson<Api.MessageDto> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiMessageDtoKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.MessageDto> = {
		'message': stringToJson(`${name}.message`, value['message']),
	}

	return result
}

export function modelApiMessageDtoFromJson(name: string, value: any): Api.MessageDto {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.MessageDto = modelApiMessageDtoFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.MessageDto: ${key}`)
		}
	}

	return result
}

export function modelApiMessageDtoToJson(name: string, value: Api.MessageDto): ToJson<Api.MessageDto> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.MessageDto> = modelApiMessageDtoToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.MessageDto: ${key}`)
		}
	}

	return result
}

const ApiNotificationDataKeys: string[] = ['appointmentdetails', 'avatarUrl', 'category', 'createdAt', 'Notificationid', 'isViewed', 'notificationRule', 'otherPersonUid', 'title', 'updatedAt', 'updatedBy', 'isExist']

function modelApiNotificationDataFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NotificationData {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NotificationData = {
		'appointmentdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsFromJson)(`${name}.appointmentdetails`, value['appointmentdetails']),
		'avatarUrl': allowUndefined(stringFromJson)(`${name}.avatarUrl`, value['avatarUrl']),
		'category': allowUndefined(stringFromJson)(`${name}.category`, value['category']),
		'createdAt': allowUndefined(stringFromJson)(`${name}.createdAt`, value['createdAt']),
		'Notificationid': allowUndefined(stringFromJson)(`${name}.Notificationid`, value['Notificationid']),
		'isViewed': allowUndefined(booleanFromJson)(`${name}.isViewed`, value['isViewed']),
		'notificationRule': allowUndefined(stringFromJson)(`${name}.notificationRule`, value['notificationRule']),
		'otherPersonUid': allowUndefined(stringFromJson)(`${name}.otherPersonUid`, value['otherPersonUid']),
		'title': allowUndefined(stringFromJson)(`${name}.title`, value['title']),
		'updatedAt': allowUndefined(stringFromJson)(`${name}.updatedAt`, value['updatedAt']),
		'updatedBy': allowUndefined(stringFromJson)(`${name}.updatedBy`, value['updatedBy']),
		'isExist': allowUndefined(booleanFromJson)(`${name}.isExist`, value['isExist']),
	}

	return result
}

function modelApiNotificationDataToJsonContent(name: string, value: Api.NotificationData, knownKeys: Record<string, boolean> = {}): ToJson<Api.NotificationData> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.NotificationData> = {
		'appointmentdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsToJson)(`${name}.appointmentdetails`, value['appointmentdetails']),
		'avatarUrl': allowUndefined(stringToJson)(`${name}.avatarUrl`, value['avatarUrl']),
		'category': allowUndefined(stringToJson)(`${name}.category`, value['category']),
		'createdAt': allowUndefined(stringToJson)(`${name}.createdAt`, value['createdAt']),
		'Notificationid': allowUndefined(stringToJson)(`${name}.Notificationid`, value['Notificationid']),
		'isViewed': allowUndefined(booleanToJson)(`${name}.isViewed`, value['isViewed']),
		'notificationRule': allowUndefined(stringToJson)(`${name}.notificationRule`, value['notificationRule']),
		'otherPersonUid': allowUndefined(stringToJson)(`${name}.otherPersonUid`, value['otherPersonUid']),
		'title': allowUndefined(stringToJson)(`${name}.title`, value['title']),
		'updatedAt': allowUndefined(stringToJson)(`${name}.updatedAt`, value['updatedAt']),
		'updatedBy': allowUndefined(stringToJson)(`${name}.updatedBy`, value['updatedBy']),
		'isExist': allowUndefined(booleanToJson)(`${name}.isExist`, value['isExist']),
	}

	return result
}

export function modelApiNotificationDataFromJson(name: string, value: any): Api.NotificationData {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NotificationData = modelApiNotificationDataFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData: ${key}`)
		}
	}

	return result
}

export function modelApiNotificationDataToJson(name: string, value: Api.NotificationData): ToJson<Api.NotificationData> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.NotificationData> = modelApiNotificationDataToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData: ${key}`)
		}
	}

	return result
}

const ApiNotificationDataAppointmentdetailsKeys: string[] = ['appointmentDate', 'appointmentStatus', 'appointmentType', 'createdAt', 'createdBy', 'doctorId', 'doctordetails', 'id', 'patientId', 'patientdetails', 'slotId', 'slotTime', 'symptoms']

function modelApiNotificationDataAppointmentdetailsFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NotificationData.Appointmentdetails {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NotificationData.Appointmentdetails = {
		'appointmentDate': allowUndefined(stringFromJson)(`${name}.appointmentDate`, value['appointmentDate']),
		'appointmentStatus': allowUndefined(stringFromJson)(`${name}.appointmentStatus`, value['appointmentStatus']),
		'appointmentType': allowUndefined(numberFromJson)(`${name}.appointmentType`, value['appointmentType']),
		'createdAt': allowUndefined(stringFromJson)(`${name}.createdAt`, value['createdAt']),
		'createdBy': allowUndefined(stringFromJson)(`${name}.createdBy`, value['createdBy']),
		'doctorId': allowUndefined(stringFromJson)(`${name}.doctorId`, value['doctorId']),
		'doctordetails': allowUndefined(modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson)(`${name}.doctordetails`, value['doctordetails']),
		'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
		'patientId': allowUndefined(stringFromJson)(`${name}.patientId`, value['patientId']),
		'patientdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson)(`${name}.patientdetails`, value['patientdetails']),
		'slotId': allowUndefined(stringFromJson)(`${name}.slotId`, value['slotId']),
		'slotTime': allowUndefined(stringFromJson)(`${name}.slotTime`, value['slotTime']),
		'symptoms': allowUndefined(stringFromJson)(`${name}.symptoms`, value['symptoms']),
	}

	return result
}

function modelApiNotificationDataAppointmentdetailsToJsonContent(name: string, value: Api.NotificationData.Appointmentdetails, knownKeys: Record<string, boolean> = {}): ToJson<Api.NotificationData.Appointmentdetails> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.NotificationData.Appointmentdetails> = {
		'appointmentDate': allowUndefined(stringToJson)(`${name}.appointmentDate`, value['appointmentDate']),
		'appointmentStatus': allowUndefined(stringToJson)(`${name}.appointmentStatus`, value['appointmentStatus']),
		'appointmentType': allowUndefined(numberToJson)(`${name}.appointmentType`, value['appointmentType']),
		'createdAt': allowUndefined(stringToJson)(`${name}.createdAt`, value['createdAt']),
		'createdBy': allowUndefined(stringToJson)(`${name}.createdBy`, value['createdBy']),
		'doctorId': allowUndefined(stringToJson)(`${name}.doctorId`, value['doctorId']),
		'doctordetails': allowUndefined(modelApiNotificationDataAppointmentdetailsDoctordetailsToJson)(`${name}.doctordetails`, value['doctordetails']),
		'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
		'patientId': allowUndefined(stringToJson)(`${name}.patientId`, value['patientId']),
		'patientdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsPatientdetailsToJson)(`${name}.patientdetails`, value['patientdetails']),
		'slotId': allowUndefined(stringToJson)(`${name}.slotId`, value['slotId']),
		'slotTime': allowUndefined(stringToJson)(`${name}.slotTime`, value['slotTime']),
		'symptoms': allowUndefined(stringToJson)(`${name}.symptoms`, value['symptoms']),
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsFromJson(name: string, value: any): Api.NotificationData.Appointmentdetails {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NotificationData.Appointmentdetails = modelApiNotificationDataAppointmentdetailsFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails: ${key}`)
		}
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsToJson(name: string, value: Api.NotificationData.Appointmentdetails): ToJson<Api.NotificationData.Appointmentdetails> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.NotificationData.Appointmentdetails> = modelApiNotificationDataAppointmentdetailsToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails: ${key}`)
		}
	}

	return result
}

const ApiNotificationDataAppointmentdetailsDoctordetailsKeys: string[] = ['fullName', 'imageUrl']

function modelApiNotificationDataAppointmentdetailsDoctordetailsFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NotificationData.Appointmentdetails.Doctordetails {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsDoctordetailsKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NotificationData.Appointmentdetails.Doctordetails = {
		'fullName': allowUndefined(stringFromJson)(`${name}.fullName`, value['fullName']),
		'imageUrl': allowUndefined(stringFromJson)(`${name}.imageUrl`, value['imageUrl']),
	}

	return result
}

function modelApiNotificationDataAppointmentdetailsDoctordetailsToJsonContent(name: string, value: Api.NotificationData.Appointmentdetails.Doctordetails, knownKeys: Record<string, boolean> = {}): ToJson<Api.NotificationData.Appointmentdetails.Doctordetails> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsDoctordetailsKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.NotificationData.Appointmentdetails.Doctordetails> = {
		'fullName': allowUndefined(stringToJson)(`${name}.fullName`, value['fullName']),
		'imageUrl': allowUndefined(stringToJson)(`${name}.imageUrl`, value['imageUrl']),
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson(name: string, value: any): Api.NotificationData.Appointmentdetails.Doctordetails {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NotificationData.Appointmentdetails.Doctordetails = modelApiNotificationDataAppointmentdetailsDoctordetailsFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Doctordetails: ${key}`)
		}
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsDoctordetailsToJson(name: string, value: Api.NotificationData.Appointmentdetails.Doctordetails): ToJson<Api.NotificationData.Appointmentdetails.Doctordetails> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.NotificationData.Appointmentdetails.Doctordetails> = modelApiNotificationDataAppointmentdetailsDoctordetailsToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Doctordetails: ${key}`)
		}
	}

	return result
}

const ApiNotificationDataAppointmentdetailsPatientdetailsKeys: string[] = ['fullName', 'imageUrl']

function modelApiNotificationDataAppointmentdetailsPatientdetailsFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NotificationData.Appointmentdetails.Patientdetails {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsPatientdetailsKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NotificationData.Appointmentdetails.Patientdetails = {
		'fullName': allowUndefined(stringFromJson)(`${name}.fullName`, value['fullName']),
		'imageUrl': allowUndefined(stringFromJson)(`${name}.imageUrl`, value['imageUrl']),
	}

	return result
}

function modelApiNotificationDataAppointmentdetailsPatientdetailsToJsonContent(name: string, value: Api.NotificationData.Appointmentdetails.Patientdetails, knownKeys: Record<string, boolean> = {}): ToJson<Api.NotificationData.Appointmentdetails.Patientdetails> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationDataAppointmentdetailsPatientdetailsKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.NotificationData.Appointmentdetails.Patientdetails> = {
		'fullName': allowUndefined(stringToJson)(`${name}.fullName`, value['fullName']),
		'imageUrl': allowUndefined(stringToJson)(`${name}.imageUrl`, value['imageUrl']),
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson(name: string, value: any): Api.NotificationData.Appointmentdetails.Patientdetails {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NotificationData.Appointmentdetails.Patientdetails = modelApiNotificationDataAppointmentdetailsPatientdetailsFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Patientdetails: ${key}`)
		}
	}

	return result
}

export function modelApiNotificationDataAppointmentdetailsPatientdetailsToJson(name: string, value: Api.NotificationData.Appointmentdetails.Patientdetails): ToJson<Api.NotificationData.Appointmentdetails.Patientdetails> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.NotificationData.Appointmentdetails.Patientdetails> = modelApiNotificationDataAppointmentdetailsPatientdetailsToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Patientdetails: ${key}`)
		}
	}

	return result
}

const ApiNotificationPagedResultDtoKeys: string[] = ['totalCount', 'items']

function modelApiNotificationPagedResultDtoFromJsonContent(name: string, value: any, knownKeys: Record<string, boolean> = {}): Api.NotificationPagedResultDto {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationPagedResultDtoKeys.forEach(k => knownKeys[k] = true)

	const result: Api.NotificationPagedResultDto = {
		'totalCount': allowUndefined(integerFromJson)(`${name}.totalCount`, value['totalCount']),
		'items': allowUndefined(arrayFromJson(modelApiNotificationDataFromJson))(`${name}.items`, value['items']),
	}

	return result
}

function modelApiNotificationPagedResultDtoToJsonContent(name: string, value: Api.NotificationPagedResultDto, knownKeys: Record<string, boolean> = {}): ToJson<Api.NotificationPagedResultDto> {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	ApiNotificationPagedResultDtoKeys.forEach(k => knownKeys[k] = true)
	
	const result: ToJson<Api.NotificationPagedResultDto> = {
		'totalCount': allowUndefined(integerToJson)(`${name}.totalCount`, value['totalCount']),
		'items': allowUndefined(arrayToJson(modelApiNotificationDataToJson))(`${name}.items`, value['items']),
	}

	return result
}

export function modelApiNotificationPagedResultDtoFromJson(name: string, value: any): Api.NotificationPagedResultDto {
	const knownKeys: Record<string, boolean> = {}
	const result: Api.NotificationPagedResultDto = modelApiNotificationPagedResultDtoFromJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationPagedResultDto: ${key}`)
		}
	}

	return result
}

export function modelApiNotificationPagedResultDtoToJson(name: string, value: Api.NotificationPagedResultDto): ToJson<Api.NotificationPagedResultDto> {
	const knownKeys: Record<string, boolean> = {}
	const result: ToJson<Api.NotificationPagedResultDto> = modelApiNotificationPagedResultDtoToJsonContent(name, value, knownKeys)

	/* Known keys */
	// TODO if we don't ignore unknown properties
	for (const key of Object.keys(value)) {
		if (!knownKeys[key]) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in Api.NotificationPagedResultDto: ${key}`)
		}
	}

	return result
}
