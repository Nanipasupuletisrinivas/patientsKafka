"use strict";
/* eslint-disable */
// tslint:disable
/**
 * Notifications Service
 * Notifications Service
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.modelApiNotificationPagedResultDtoToJson = exports.modelApiNotificationPagedResultDtoFromJson = exports.modelApiNotificationDataAppointmentdetailsPatientdetailsToJson = exports.modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson = exports.modelApiNotificationDataAppointmentdetailsDoctordetailsToJson = exports.modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson = exports.modelApiNotificationDataAppointmentdetailsToJson = exports.modelApiNotificationDataAppointmentdetailsFromJson = exports.modelApiNotificationDataToJson = exports.modelApiNotificationDataFromJson = exports.modelApiMessageDtoToJson = exports.modelApiMessageDtoFromJson = exports.enumApiDirectionParamEnumToJson = exports.enumApiDirectionParamEnumFromJson = exports.timeToJson = exports.parseTime = exports.timeFromJson = exports.dateTimeToJson = exports.parseDateTime = exports.dateTimeFromJson = exports.dateToJson = exports.parseDate = exports.dateFromJson = exports.parseNumber = exports.numberToJson = exports.numberFromJson = exports.parseInteger = exports.integerToJson = exports.integerFromJson = exports.parseString = exports.binaryToJson = exports.binaryFromJson = exports.stringToJson = exports.stringFromJson = exports.parseBoolean = exports.booleanToJson = exports.booleanFromJson = exports.parseUnsupported = exports.unsupportedToJson = exports.unsupportedFromJson = exports.allowNullOrUndefined = exports.allowUndefined = exports.allowNull = exports.mapToJson = exports.mapFromJson = exports.arrayToJson = exports.arrayFromJson = void 0;
const models_1 = require("./models");
function arrayFromJson(next) {
    return function (name, value) {
        if (typeof value !== 'object' || typeof value.length !== 'number') {
            throw `Invalid type for ${name}: expected array got ${typeof value}`;
        }
        const result = [];
        for (const el of value) {
            result.push(next(name, el));
        }
        return result;
    };
}
exports.arrayFromJson = arrayFromJson;
function arrayToJson(next) {
    return arrayFromJson(next);
}
exports.arrayToJson = arrayToJson;
function mapFromJson(next) {
    return function (name, value) {
        if (typeof value !== 'object') {
            throw `Invalid type for ${name}: expected object got ${typeof value}`;
        }
        const result = {};
        for (const key in value) {
            if (value.hasOwnProperty(key)) {
                result[key] = next(name, value[key]);
            }
        }
        return result;
    };
}
exports.mapFromJson = mapFromJson;
function mapToJson(next) {
    return mapFromJson(next);
}
exports.mapToJson = mapToJson;
function allowNull(next) {
    return function (name, value) {
        if (value === null) {
            return null;
        }
        return next(name, value);
    };
}
exports.allowNull = allowNull;
function allowUndefined(next) {
    return function (name, value) {
        if (value === undefined) {
            return undefined;
        }
        return next(name, value);
    };
}
exports.allowUndefined = allowUndefined;
function allowNullOrUndefined(next) {
    return function (name, value) {
        if (value === null) {
            return null;
        }
        if (value === undefined) {
            return undefined;
        }
        return next(name, value);
    };
}
exports.allowNullOrUndefined = allowNullOrUndefined;
function unsupportedFromJson(name, value) {
    if (value === undefined) {
        throw `Invalid type for ${name}: expected unknown got undefined`;
    }
    return value;
}
exports.unsupportedFromJson = unsupportedFromJson;
function unsupportedToJson(name, value) {
    return unsupportedFromJson(name, value);
}
exports.unsupportedToJson = unsupportedToJson;
function parseUnsupported(name, value) {
    if (value === undefined) {
        throw `Invalid value for ${name}: expected unknown got undefined`;
    }
    return value;
}
exports.parseUnsupported = parseUnsupported;
function booleanFromJson(name, value) {
    if (typeof value !== 'boolean') {
        throw `Invalid type for ${name}: expected boolean got ${typeof value}`;
    }
    return value;
}
exports.booleanFromJson = booleanFromJson;
function booleanToJson(name, value) {
    return booleanFromJson(name, value);
}
exports.booleanToJson = booleanToJson;
function parseBoolean(name, value) {
    if (value === 'true') {
        return true;
    }
    else if (value === 'false') {
        return false;
    }
    else {
        throw `Invalid value for ${name}: expected boolean got "${value}"`;
    }
}
exports.parseBoolean = parseBoolean;
function stringFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    return value;
}
exports.stringFromJson = stringFromJson;
function stringToJson(name, value) {
    return stringFromJson(name, value);
}
exports.stringToJson = stringToJson;
function binaryFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    return new Buffer(value, 'base64');
}
exports.binaryFromJson = binaryFromJson;
function binaryToJson(name, value) {
    if (typeof value === 'string') {
        return value;
    }
    else {
        return value.toString('base64');
    }
}
exports.binaryToJson = binaryToJson;
function parseString(name, value) {
    if (value === undefined) {
        throw `Invalid value for ${name}: expected string got undefined`;
    }
    if (typeof value === 'string') {
        return value;
    }
    if (typeof value === 'object' && typeof value.length === 'number') {
        if (value.length > 0) {
            return value[0];
        }
    }
    throw `Invalid value for ${name}: expected string got ${typeof value}`;
}
exports.parseString = parseString;
function integerFromJson(name, value) {
    if (typeof value !== 'number') {
        throw `Invalid type for ${name}: expected number got ${typeof value}`;
    }
    if (isNaN(value)) {
        throw `Invalid NaN for ${name}`;
    }
    if (Math.floor(value) !== value) {
        throw `Invalid value for ${name}: expected integer got "${value}"`;
    }
    return value;
}
exports.integerFromJson = integerFromJson;
function integerToJson(name, value) {
    return integerFromJson(name, value);
}
exports.integerToJson = integerToJson;
function parseInteger(name, value) {
    if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
        value = value[0];
    }
    if (typeof value === 'string') {
        if (value.indexOf('.') !== -1) {
            throw `Invalid value for ${name}: expected integer got "${value}"`;
        }
        const result = parseInt(value, 10);
        if (isNaN(result)) {
            throw `Invalid value for ${name}: expected integer got "${value}"`;
        }
        return result;
    }
    throw `Invalid value for ${name}: expected integer got ${typeof value}`;
}
exports.parseInteger = parseInteger;
function numberFromJson(name, value) {
    if (typeof value !== 'number') {
        throw `Invalid type for ${name}: expected number got ${typeof value}`;
    }
    if (isNaN(value)) {
        throw `Invalid NaN for ${name}`;
    }
    return value;
}
exports.numberFromJson = numberFromJson;
function numberToJson(name, value) {
    return numberFromJson(name, value);
}
exports.numberToJson = numberToJson;
function parseNumber(name, value) {
    if (typeof value === 'object' && typeof value.length === 'number' && value.length > 0) {
        value = value[0];
    }
    if (typeof value === 'string') {
        const result = parseFloat(value);
        if (isNaN(result)) {
            throw `Invalid value for ${name}: expected float got "${value}"`;
        }
        return result;
    }
    throw `Invalid value for ${name}: expected number got ${typeof value}`;
}
exports.parseNumber = parseNumber;
function dateFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
        throw `Invalid value for ${name}: expected valid date string got "${value}"`;
    }
    return value;
}
exports.dateFromJson = dateFromJson;
function parseDate(name, value) {
    return dateFromJson(name, value);
}
exports.parseDate = parseDate;
function dateToJson(name, value) {
    return dateFromJson(name, value);
}
exports.dateToJson = dateToJson;
function dateTimeFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?(Z|(\+|-)[0-9]{2}(:?[0-9]{2})?)$/)) {
        throw `Invalid value for ${name}: expected valid datetime string got "${value}"`;
    }
    return new Date(value);
}
exports.dateTimeFromJson = dateTimeFromJson;
function parseDateTime(name, value) {
    return dateTimeFromJson(name, value);
}
exports.parseDateTime = parseDateTime;
function dateTimeToJson(name, value) {
    if (typeof value !== 'object' || typeof value.toISOString !== 'function') {
        throw `Invalid type for ${name}: expected Date got ${typeof value}`;
    }
    return value.toISOString();
}
exports.dateTimeToJson = dateTimeToJson;
function timeFromJson(name, value) {
    if (typeof value !== 'string') {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (!value.match(/^[0-9]{2}:[0-9]{2}(:[0-9]{2}(\.[0-9]+)?)?$/)) {
        throw `Invalid value for ${name}: expected valid time string got "${value}"`;
    }
    return value;
}
exports.timeFromJson = timeFromJson;
function parseTime(name, value) {
    return timeFromJson(name, value);
}
exports.parseTime = parseTime;
function timeToJson(name, value) {
    return timeFromJson(name, value);
}
exports.timeToJson = timeToJson;
/* Model conversion functions */
function enumApiDirectionParamEnumFromJson(name, value) {
    if (typeof value !== 'string' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (value === 'asc') {
        return models_1.Api.DirectionParamEnum.Asc;
    }
    if (value === 'desc') {
        return models_1.Api.DirectionParamEnum.Desc;
    }
    throw `Unexpected enum value for Api.DirectionParamEnum: ${value}`;
}
exports.enumApiDirectionParamEnumFromJson = enumApiDirectionParamEnumFromJson;
function enumApiDirectionParamEnumToJson(name, value) {
    if (typeof value !== 'string' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected string got ${typeof value}`;
    }
    if (value === 'asc') {
        return models_1.Api.DirectionParamEnum.Asc;
    }
    if (value === 'desc') {
        return models_1.Api.DirectionParamEnum.Desc;
    }
    throw `Unexpected enum value for Api.DirectionParamEnum: ${value}`;
}
exports.enumApiDirectionParamEnumToJson = enumApiDirectionParamEnumToJson;
const ApiMessageDtoKeys = ['message'];
function modelApiMessageDtoFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiMessageDtoKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': stringFromJson(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiMessageDtoToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiMessageDtoKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'message': stringToJson(`${name}.message`, value['message']),
    };
    return result;
}
function modelApiMessageDtoFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiMessageDtoFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.MessageDto: ${key}`);
        }
    }
    return result;
}
exports.modelApiMessageDtoFromJson = modelApiMessageDtoFromJson;
function modelApiMessageDtoToJson(name, value) {
    const knownKeys = {};
    const result = modelApiMessageDtoToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.MessageDto: ${key}`);
        }
    }
    return result;
}
exports.modelApiMessageDtoToJson = modelApiMessageDtoToJson;
const ApiNotificationDataKeys = ['appointmentdetails', 'avatarUrl', 'category', 'createdAt', 'Notificationid', 'isViewed', 'notificationRule', 'otherPersonUid', 'title', 'updataedAt', 'updatedBy', 'isExist'];
function modelApiNotificationDataFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'appointmentdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsFromJson)(`${name}.appointmentdetails`, value['appointmentdetails']),
        'avatarUrl': allowUndefined(stringFromJson)(`${name}.avatarUrl`, value['avatarUrl']),
        'category': allowUndefined(stringFromJson)(`${name}.category`, value['category']),
        'createdAt': allowUndefined(stringFromJson)(`${name}.createdAt`, value['createdAt']),
        'Notificationid': allowUndefined(stringFromJson)(`${name}.Notificationid`, value['Notificationid']),
        'isViewed': allowUndefined(booleanFromJson)(`${name}.isViewed`, value['isViewed']),
        'notificationRule': allowUndefined(stringFromJson)(`${name}.notificationRule`, value['notificationRule']),
        'otherPersonUid': allowUndefined(stringFromJson)(`${name}.otherPersonUid`, value['otherPersonUid']),
        'title': allowUndefined(stringFromJson)(`${name}.title`, value['title']),
        'updataedAt': allowUndefined(stringFromJson)(`${name}.updataedAt`, value['updataedAt']),
        'updatedBy': allowUndefined(stringFromJson)(`${name}.updatedBy`, value['updatedBy']),
        'isExist': allowUndefined(booleanFromJson)(`${name}.isExist`, value['isExist']),
    };
    return result;
}
function modelApiNotificationDataToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'appointmentdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsToJson)(`${name}.appointmentdetails`, value['appointmentdetails']),
        'avatarUrl': allowUndefined(stringToJson)(`${name}.avatarUrl`, value['avatarUrl']),
        'category': allowUndefined(stringToJson)(`${name}.category`, value['category']),
        'createdAt': allowUndefined(stringToJson)(`${name}.createdAt`, value['createdAt']),
        'Notificationid': allowUndefined(stringToJson)(`${name}.Notificationid`, value['Notificationid']),
        'isViewed': allowUndefined(booleanToJson)(`${name}.isViewed`, value['isViewed']),
        'notificationRule': allowUndefined(stringToJson)(`${name}.notificationRule`, value['notificationRule']),
        'otherPersonUid': allowUndefined(stringToJson)(`${name}.otherPersonUid`, value['otherPersonUid']),
        'title': allowUndefined(stringToJson)(`${name}.title`, value['title']),
        'updataedAt': allowUndefined(stringToJson)(`${name}.updataedAt`, value['updataedAt']),
        'updatedBy': allowUndefined(stringToJson)(`${name}.updatedBy`, value['updatedBy']),
        'isExist': allowUndefined(booleanToJson)(`${name}.isExist`, value['isExist']),
    };
    return result;
}
function modelApiNotificationDataFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataFromJson = modelApiNotificationDataFromJson;
function modelApiNotificationDataToJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataToJson = modelApiNotificationDataToJson;
const ApiNotificationDataAppointmentdetailsKeys = ['appointmentDate', 'appointmentStatus', 'appointmentType', 'createdAt', 'createdBy', 'doctorId', 'doctordetails', 'id', 'patientId', 'patientdetails', 'slotId', 'slotTime', 'symptoms'];
function modelApiNotificationDataAppointmentdetailsFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'appointmentDate': allowUndefined(stringFromJson)(`${name}.appointmentDate`, value['appointmentDate']),
        'appointmentStatus': allowUndefined(stringFromJson)(`${name}.appointmentStatus`, value['appointmentStatus']),
        'appointmentType': allowUndefined(numberFromJson)(`${name}.appointmentType`, value['appointmentType']),
        'createdAt': allowUndefined(stringFromJson)(`${name}.createdAt`, value['createdAt']),
        'createdBy': allowUndefined(stringFromJson)(`${name}.createdBy`, value['createdBy']),
        'doctorId': allowUndefined(stringFromJson)(`${name}.doctorId`, value['doctorId']),
        'doctordetails': allowUndefined(modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson)(`${name}.doctordetails`, value['doctordetails']),
        'id': allowUndefined(stringFromJson)(`${name}.id`, value['id']),
        'patientId': allowUndefined(stringFromJson)(`${name}.patientId`, value['patientId']),
        'patientdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson)(`${name}.patientdetails`, value['patientdetails']),
        'slotId': allowUndefined(stringFromJson)(`${name}.slotId`, value['slotId']),
        'slotTime': allowUndefined(stringFromJson)(`${name}.slotTime`, value['slotTime']),
        'symptoms': allowUndefined(stringFromJson)(`${name}.symptoms`, value['symptoms']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'appointmentDate': allowUndefined(stringToJson)(`${name}.appointmentDate`, value['appointmentDate']),
        'appointmentStatus': allowUndefined(stringToJson)(`${name}.appointmentStatus`, value['appointmentStatus']),
        'appointmentType': allowUndefined(numberToJson)(`${name}.appointmentType`, value['appointmentType']),
        'createdAt': allowUndefined(stringToJson)(`${name}.createdAt`, value['createdAt']),
        'createdBy': allowUndefined(stringToJson)(`${name}.createdBy`, value['createdBy']),
        'doctorId': allowUndefined(stringToJson)(`${name}.doctorId`, value['doctorId']),
        'doctordetails': allowUndefined(modelApiNotificationDataAppointmentdetailsDoctordetailsToJson)(`${name}.doctordetails`, value['doctordetails']),
        'id': allowUndefined(stringToJson)(`${name}.id`, value['id']),
        'patientId': allowUndefined(stringToJson)(`${name}.patientId`, value['patientId']),
        'patientdetails': allowUndefined(modelApiNotificationDataAppointmentdetailsPatientdetailsToJson)(`${name}.patientdetails`, value['patientdetails']),
        'slotId': allowUndefined(stringToJson)(`${name}.slotId`, value['slotId']),
        'slotTime': allowUndefined(stringToJson)(`${name}.slotTime`, value['slotTime']),
        'symptoms': allowUndefined(stringToJson)(`${name}.symptoms`, value['symptoms']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsFromJson = modelApiNotificationDataAppointmentdetailsFromJson;
function modelApiNotificationDataAppointmentdetailsToJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsToJson = modelApiNotificationDataAppointmentdetailsToJson;
const ApiNotificationDataAppointmentdetailsDoctordetailsKeys = ['fullName', 'imageUrl'];
function modelApiNotificationDataAppointmentdetailsDoctordetailsFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsDoctordetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'fullName': allowUndefined(stringFromJson)(`${name}.fullName`, value['fullName']),
        'imageUrl': allowUndefined(stringFromJson)(`${name}.imageUrl`, value['imageUrl']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsDoctordetailsToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsDoctordetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'fullName': allowUndefined(stringToJson)(`${name}.fullName`, value['fullName']),
        'imageUrl': allowUndefined(stringToJson)(`${name}.imageUrl`, value['imageUrl']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsDoctordetailsFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Doctordetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson = modelApiNotificationDataAppointmentdetailsDoctordetailsFromJson;
function modelApiNotificationDataAppointmentdetailsDoctordetailsToJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsDoctordetailsToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Doctordetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsDoctordetailsToJson = modelApiNotificationDataAppointmentdetailsDoctordetailsToJson;
const ApiNotificationDataAppointmentdetailsPatientdetailsKeys = ['fullName', 'imageUrl'];
function modelApiNotificationDataAppointmentdetailsPatientdetailsFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsPatientdetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'fullName': allowUndefined(stringFromJson)(`${name}.fullName`, value['fullName']),
        'imageUrl': allowUndefined(stringFromJson)(`${name}.imageUrl`, value['imageUrl']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsPatientdetailsToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationDataAppointmentdetailsPatientdetailsKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'fullName': allowUndefined(stringToJson)(`${name}.fullName`, value['fullName']),
        'imageUrl': allowUndefined(stringToJson)(`${name}.imageUrl`, value['imageUrl']),
    };
    return result;
}
function modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsPatientdetailsFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Patientdetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson = modelApiNotificationDataAppointmentdetailsPatientdetailsFromJson;
function modelApiNotificationDataAppointmentdetailsPatientdetailsToJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationDataAppointmentdetailsPatientdetailsToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationData.Appointmentdetails.Patientdetails: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationDataAppointmentdetailsPatientdetailsToJson = modelApiNotificationDataAppointmentdetailsPatientdetailsToJson;
const ApiNotificationPagedResultDtoKeys = ['totalCount', 'items'];
function modelApiNotificationPagedResultDtoFromJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationPagedResultDtoKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'totalCount': allowUndefined(integerFromJson)(`${name}.totalCount`, value['totalCount']),
        'items': allowUndefined(arrayFromJson(modelApiNotificationDataFromJson))(`${name}.items`, value['items']),
    };
    return result;
}
function modelApiNotificationPagedResultDtoToJsonContent(name, value, knownKeys = {}) {
    if (typeof value !== 'object' || value === undefined || value === null) {
        throw `Invalid type for ${name}: expected object got ${typeof value}`;
    }
    ApiNotificationPagedResultDtoKeys.forEach(k => knownKeys[k] = true);
    const result = {
        'totalCount': allowUndefined(integerToJson)(`${name}.totalCount`, value['totalCount']),
        'items': allowUndefined(arrayToJson(modelApiNotificationDataToJson))(`${name}.items`, value['items']),
    };
    return result;
}
function modelApiNotificationPagedResultDtoFromJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationPagedResultDtoFromJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationPagedResultDto: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationPagedResultDtoFromJson = modelApiNotificationPagedResultDtoFromJson;
function modelApiNotificationPagedResultDtoToJson(name, value) {
    const knownKeys = {};
    const result = modelApiNotificationPagedResultDtoToJsonContent(name, value, knownKeys);
    /* Known keys */
    // TODO if we don't ignore unknown properties
    for (const key of Object.keys(value)) {
        if (!knownKeys[key]) {
            // throw `Unexpected key: ${key}`
            console.warn(`Unexpected key in Api.NotificationPagedResultDto: ${key}`);
        }
    }
    return result;
}
exports.modelApiNotificationPagedResultDtoToJson = modelApiNotificationPagedResultDtoToJson;
